name: Test package with redhat

on:
  push:
    # The CI is executed on every push on every branch
    branches:
      - "**"
  pull_request:
    # The CI is executed on every pull request to the main branch
    branches:
      - main

  workflow_call:
  workflow_dispatch:
  schedule:
    # The CI is executed every day at 8am
    - cron: "0 8 * * *"

jobs:
  create-datasets:
    uses: ./.github/workflows/create_legacy_data.yml
    with:
      artifact_name: "legacy_ompi"

  create-legacy-datasets:
    uses: ./.github/workflows/create_legacy_checkpoint.yml
    with:
      artifact_name: "legacy_checkpoint_ompi"

  test-code:
    runs-on: "ubuntu-22.04"
    needs: [create-datasets, create-legacy-datasets]
    container: docker.io/fenicsproject/test-env:current-redhat
    env:
      DEB_PYTHON_INSTALL_LAYOUT: deb_system
      PETSC_ARCH: ""
      PETSC_DIR: "/usr/local/"
      PYTHONPATH: "/usr/local/lib/:${PYTHONPATH}"
      working-directory: ./src

    strategy:
      matrix:
        adios2: ["v2.10.0"]
    steps:
      - uses: actions/checkout@v4

      - name: Update pip
        run: python3 -m pip install --break-system-packages --upgrade pip setuptools

      - name: Install DOLFINx
        uses: jorgensd/actions/install-dolfinx@v0.3
        with:
          adios2: ${{ matrix.adios2 }}
          petsc_arch: ${{ env.PETSC_ARCH }}
          petsc_dir: ${{ env.PETSC_DIR }}
          dolfinx: v0.8.0
          basix: v0.8.0
          ufl: 2024.1.0.post0
          ffcx: v0.8.0
          working-directory: ${{ env.working-directory}}

      - name: Download legacy data
        uses: actions/download-artifact@v4
        with:
          name: legacy_ompi
          path: ./legacy

      - name: Download legacy data
        uses: actions/download-artifact@v4
        with:
          name: legacy_checkpoint_ompi
          path: ./legacy_checkpoint

      - name: Install package
        run: python3 -m pip install --break-system-packages .[test]

      - name: Run tests
        run: |
          coverage run --rcfile=.coveragerc -m mpi4py -m pytest -xvs ./tests

      - name: Run tests in parallel
        run: |
          mpirun -n 4 coverage run --rcfile=.coveragerc -m mpi4py -m pytest -xvs ./tests
